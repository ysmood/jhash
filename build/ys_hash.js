// Generated by CoffeeScript 1.7.1
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

(function() {
  var Ys_hash;
  Ys_hash = (function() {
    function Ys_hash() {
      this.hash_str = __bind(this.hash_str, this);
      this.hash_arr = __bind(this.hash_arr, this);
      this.set_mask_len = __bind(this.set_mask_len, this);
      this.set_symbols = __bind(this.set_symbols, this);
      this.init_sum = 8388617;
      this.set_symbols("0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-._!'()*");
      this.set_mask_len(31);
    }

    Ys_hash.prototype.set_symbols = function(str) {

      /*
      				Control the char set.
       */
      return this.symbols = str.split('');
    };

    Ys_hash.prototype.set_mask_len = function(len) {

      /*
      				If you want shorter hash, this is the api.
       */
      return this.mask = 0xffffffff >>> (32 - len);
    };

    Ys_hash.prototype.hash_arr = function(arr) {

      /*
      				Also can hash a file buffer.
       */
      var h, i, _i, _len;
      h = this.init_sum;
      for (_i = 0, _len = arr.length; _i < _len; _i++) {
        i = arr[_i];
        h = ((h << 1 | h >>> 30) & this.mask) ^ i;
      }
      return this.to_str(h);
    };

    Ys_hash.prototype.hash_str = function(str) {
      var h, i, len;
      h = this.init_sum;
      i = 0;
      len = str.length;
      while (i < len) {
        h = ((h << 1 | h >>> 30) & this.mask) ^ str.charCodeAt(i++);
      }
      return this.to_str(h);
    };

    Ys_hash.prototype.to_str = function(num) {
      var base, s, sign, str;
      str = '';
      sign = '';
      base = this.symbols.length;
      if (num < 0) {
        sign = '-';
        num *= -1;
      }
      while (num >= base) {
        s = num % base;
        str = this.symbols[s] + str;
        num = (num - s) / base;
      }
      str = sign + this.symbols[num] + str;
      return str;
    };

    return Ys_hash;

  })();
  if (typeof module === 'undefined') {
    return window.ys_hash = new Ys_hash;
  } else {
    return module.exports = new Ys_hash;
  }
})();
