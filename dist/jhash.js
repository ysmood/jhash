// Generated by CoffeeScript 1.7.1
(function() {
  var Jhash,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Jhash = (function() {
    function Jhash() {
      this.setMaskLen = __bind(this.setMaskLen, this);
      this.setSymbols = __bind(this.setSymbols, this);
      this.setSymbols("0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-._!'()*");
      this.setMaskLen(32);
    }

    Jhash.prototype.setSymbols = function(str) {

      /*
      			Control the char set.
       */
      return this.symbols = str.split('');
    };

    Jhash.prototype.setMaskLen = function(len) {

      /*
      			If you want shorter hash, this is the api.
       */
      if (len > 32) {
        len = 32;
      }
      this.initSum = Math.pow(2, (len - len % 2) / 2);
      this.rollLen = len - 1;
      return this.mask = 0xffffffff >>> (32 - len);
    };

    Jhash.prototype.hash = function(data, isNumber) {
      var h;
      if (isNumber == null) {
        isNumber = false;
      }

      /*
      			Auto check the data type and choose the corresponding method.
       */
      if (typeof data === 'string') {
        h = this.hashStr(data);
      } else if (Buffer.isBuffer(data) || Array.isArray(data)) {
        h = this.hashArr(data);
      }
      h = h >>> 0;
      if (isNumber) {
        return h;
      } else {
        return this.toStr(h);
      }
    };

    Jhash.prototype.hashArr = function(arr) {

      /*
      			Also can hash a file buffer.
       */
      var h, i, _i, _len;
      h = this.initSum;
      for (_i = 0, _len = arr.length; _i < _len; _i++) {
        i = arr[_i];
        h = this.sum(h, i);
      }
      return h;
    };

    Jhash.prototype.hashStr = function(str) {
      var h, i, len;
      h = this.initSum;
      i = 0;
      len = str.length;
      while (i < len) {
        h = this.sum(h, str.charCodeAt(i++));
      }
      return h;
    };

    Jhash.prototype.sum = function(h, v) {
      return ((h << 1 | h >>> this.rollLen) & this.mask) ^ v;
    };

    Jhash.prototype.toStr = function(num) {
      var base, s, str;
      str = '';
      base = this.symbols.length;
      while (num >= base) {
        s = num % base;
        str = this.symbols[s] + str;
        num = (num - s) / base;
      }
      str = this.symbols[num] + str;
      return str;
    };

    return Jhash;

  })();

  if (typeof module === "object" && typeof module.exports === "object") {
    global.Jhash = Jhash;
    module.exports = new Jhash;
  } else {
    if (typeof define === "function" && define.amd) {
      define(function() {
        return new Jhash;
      });
    } else {
      window.jhash = new Jhash;
    }
  }

}).call(this);
