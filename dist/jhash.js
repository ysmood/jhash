// Generated by CoffeeScript 1.9.2
(function() {
  var Jhash;

  Jhash = (function() {
    var jhash;

    function Jhash() {
      this.setSymbols("0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-._!'()*");
      this.setMaskLen(32);
    }

    Jhash.prototype.setSymbols = function(str) {

      /*
      			Control the char set.
       */
      return this.symbols = str.split('');
    };

    Jhash.prototype.setMaskLen = function(len) {

      /*
      			If you want shorter hash, this is the api.
       */
      if (len > 32) {
        len = 32;
      }
      this.initSum = Math.pow(2, (len - len % 2) / 2);
      this.rollLen = len - 1;
      return this.mask = 0xffffffff >>> (32 - len);
    };

    Jhash.prototype.hash = function(data, isNumber) {
      var h;
      if (isNumber == null) {
        isNumber = false;
      }

      /*
      			Auto check the data type and choose the corresponding method.
       */
      if (typeof data === 'string') {
        h = this.hashStr(data);
      } else if (Buffer.isBuffer(data) || Array.isArray(data)) {
        h = this.hashArr(data);
      }
      h = h >>> 0;
      if (isNumber) {
        return h;
      } else {
        return this.toStr(h);
      }
    };

    Jhash.prototype.hashArr = function(arr) {

      /*
      			Also can hash a file buffer.
       */
      var h, i, j, len1;
      h = this.initSum;
      for (j = 0, len1 = arr.length; j < len1; j++) {
        i = arr[j];
        h = this.sum(h, i);
      }
      return h;
    };

    Jhash.prototype.hashStr = function(str) {
      var h, i, len;
      h = this.initSum;
      i = 0;
      len = str.length;
      while (i < len) {
        h = this.sum(h, str.charCodeAt(i++));
      }
      return h;
    };

    Jhash.prototype.sum = function(h, v) {
      return ((h << 1 | h >>> this.rollLen) & this.mask) ^ v;
    };

    Jhash.prototype.toStr = function(num) {
      var base, s, str;
      str = '';
      base = this.symbols.length;
      while (num >= base) {
        s = num % base;
        str = this.symbols[s] + str;
        num = (num - s) / base;
      }
      str = this.symbols[num] + str;
      return str;
    };

    jhash = new Jhash;

    try {
      module.exports = jhash;
    } catch (_error) {
      try {
        define(function() {
          return jhash;
        });
      } catch (_error) {
        window.jhash = jhash;
      }
    }

    return Jhash;

  })();

}).call(this);
